{"ast":null,"code":"var _jsxFileName = \"E:\\\\Workik_assignment\\\\chatbot-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './index.css';\n\n// const App = () => {\n//   const [input, setInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n\n//   const handleSubmit = async () => {\n//     if (!input) return;\n\n//     try {\n//       const response = await fetch('http://localhost:5000/query', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ query: input })\n//       });\n\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         setMessages([...messages, { type: 'user', message: input }, { type: 'bot', message: data.response }]);\n//       } else {\n//         setMessages([...messages, { type: 'bot', message: 'Unable to connect to the server' }]);\n//       }\n\n//     } catch (error) {\n//       setMessages([...messages, { type: 'bot', message: 'Encountered an error' }]);\n//     }\n//     setInput('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"chat-container\">\n//         <div className=\"chat-messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={'message ' + msg.type}>\n//               {msg.message}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"input-container\">\n//           <input\n//             className=\"input-field\"\n//             value={input}\n//             onChange={(e) => setInput(e.target.value)}\n//             placeholder=\"Type your message here...\"\n//           />\n//           <button className=\"send-button\" onClick={handleSubmit}>Send</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const fetchGpt3Response = async message => {\n    const apiResponse = await fetch(\"http://localhost:5000/api/chat\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n    const data = await apiResponse.json();\n    return data.message;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessages([...messages, `user: ${input}`]);\n    const gpt3Response = await fetchGpt3Response(input);\n    setMessages(prev => [...prev, `AI: ${gpt3Response}`]);\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"Xhz1M2btVGAzY17pd7+8a34J2bk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","input","setInput","messages","setMessages","fetchGpt3Response","message","apiResponse","fetch","method","headers","body","JSON","stringify","data","json","handleSubmit","e","preventDefault","gpt3Response","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["E:/Workik_assignment/chatbot-frontend/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import './index.css';\r\n\r\n// const App = () => {\r\n//   const [input, setInput] = useState('');\r\n//   const [messages, setMessages] = useState([]);\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!input) return;\r\n  \r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/query', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({ query: input })\r\n//       });\r\n\r\n//       const data = await response.json();\r\n    \r\n//       if (response.ok) {\r\n//         setMessages([...messages, { type: 'user', message: input }, { type: 'bot', message: data.response }]);\r\n//       } else {\r\n//         setMessages([...messages, { type: 'bot', message: 'Unable to connect to the server' }]);\r\n//       }\r\n\r\n//     } catch (error) {\r\n//       setMessages([...messages, { type: 'bot', message: 'Encountered an error' }]);\r\n//     }\r\n//     setInput('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div className=\"chat-container\">\r\n//         <div className=\"chat-messages\">\r\n//           {messages.map((msg, index) => (\r\n//             <div key={index} className={'message ' + msg.type}>\r\n//               {msg.message}\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//         <div className=\"input-container\">\r\n//           <input\r\n//             className=\"input-field\"\r\n//             value={input}\r\n//             onChange={(e) => setInput(e.target.value)}\r\n//             placeholder=\"Type your message here...\"\r\n//           />\r\n//           <button className=\"send-button\" onClick={handleSubmit}>Send</button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst App = () => {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const fetchGpt3Response = async (message) => {\r\n        const apiResponse = await fetch(\"http://localhost:5000/api/chat\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ message })\r\n        });\r\n\r\n        const data = await apiResponse.json();\r\n        return data.message;\r\n    };\r\n    \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setMessages([...messages, `user: ${input}`]);\r\n        const gpt3Response = await fetchGpt3Response(input);\r\n        setMessages((prev) => [...prev, `AI: ${gpt3Response}`]);\r\n        setInput('');\r\n    };\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            <div>Chat</div>\r\n            <div>\r\n                {messages.map((msg, index) => (\r\n                    <p key={index}>{msg}</p>\r\n                ))}\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}