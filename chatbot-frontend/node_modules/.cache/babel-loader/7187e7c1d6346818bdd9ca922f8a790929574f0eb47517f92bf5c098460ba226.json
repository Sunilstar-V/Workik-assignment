{"ast":null,"code":"var _jsxFileName = \"E:\\\\Workik_assignment\\\\chatbot-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const handleSubmit = async () => {\n    if (!input) return;\n    try {\n      const response = await fetch('http://localhost:5000/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: input\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessages([...messages, {\n          type: 'user',\n          message: input\n        }, {\n          type: 'bot',\n          message: data.response\n        }]);\n      } else {\n        setMessages([...messages, {\n          type: 'bot',\n          message: 'Unable to connect to the server'\n        }]);\n      }\n    } catch (error) {\n      setMessages([...messages, {\n        type: 'bot',\n        message: 'Encountered an error'\n      }]);\n    }\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'message ${msg.type}',\n          children: msg.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input-field\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your message here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSubmit,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Xhz1M2btVGAzY17pd7+8a34J2bk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","input","setInput","messages","setMessages","handleSubmit","response","fetch","method","headers","body","JSON","stringify","query","data","json","ok","type","message","error","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["E:/Workik_assignment/chatbot-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './index.css';\r\n\r\nconst App = () => {\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const handleSubmit = async () => {\r\n    if (!input) return;\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:5000/query', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ query: input })\r\n      });\r\n\r\n      const data = await response.json();\r\n    \r\n      if (response.ok) {\r\n        setMessages([...messages, { type: 'user', message: input }, { type: 'bot', message: data.response }]);\r\n      } else {\r\n        setMessages([...messages, { type: 'bot', message: 'Unable to connect to the server' }]);\r\n      }\r\n\r\n    } catch (error) {\r\n      setMessages([...messages, { type: 'bot', message: 'Encountered an error' }]);\r\n    }\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-messages\">\r\n          {messages.map((msg, index) => (\r\n            <div key={index} className={'message ${msg.type}'}>\r\n              {msg.message}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <input\r\n            className=\"input-field\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type your message here...\"\r\n          />\r\n          <button className=\"send-button\" onClick={handleSubmit}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}